{"name":"PadroesProjetoPython","tagline":"Exemplo de utilização dos Padrões Fabrica Abstrata, Builder, Método Fabrica e Prototipo em Python","body":"##  Descrição do Projeto\r\n\r\nImplementação em Python dos Padrões de Projeto Método Fabrica e Protótipo, adicionalmente foi implementado os padrões Fábrica Abstrata e Builder. Todos os padrões foram utilizados em projeto que se baseia no exemplo do livro que ilustra uma fabrica de veículos e funcionam de forma combinada. Abaixo exemplificamos como os padrões foram utilizados em conjunto.\r\n\r\n![[ Imagem Resumo ]](https://lh6.googleusercontent.com/-NWWBrRooh70/U49RUj2BKkI/AAAAAAAAAcY/gCfSyKMDM6s/w591-h403-no/ResumoProjeto.png)\r\n<br>\r\n\r\n## Diagrama do Projeto\r\n\r\n![[ Imagem Diagrama ]](https://lh5.googleusercontent.com/-gIN1A8drIkg/U49RVpvOduI/AAAAAAAAAco/UoITkaGMr-A/w612-h551-no/DiagramaProjeto.png)\r\n<br>\r\n## Diferenças básicas de Implementação\r\n\r\n* Python não aceita declaração de Visibilidade de Código (public, private, protected..)\r\n* Python não possui suporte nativo a Interface (não em suas bibliotecas padrões)\r\n* Python não necessita de herança de classe abstrata para fazer polimorfismo na instanciação de classes filhas\r\n* Python permite a criação de varias classes no mesmo arquivo.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}